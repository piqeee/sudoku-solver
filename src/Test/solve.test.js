const {solve, is_solved, next_board, find_blank,fillNumber1to9, valid_board} = require('../Components/solve.jsx');

const BD1 = [[0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0]]
const BD2 = [[1,2,3,4,5,6,7,8,9],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0],
             [0,0,0,0,0,0,0,0,0]]
const BD3 = [[1,0,0,0,0,0,0,0,0],
             [2,0,0,0,0,0,0,0,0],
             [3,0,0,0,0,0,0,0,0],
             [4,0,0,0,0,0,0,0,0],
             [5,0,0,0,0,0,0,0,0],
             [6,0,0,0,0,0,0,0,0],
             [7,0,0,0,0,0,0,0,0],
             [8,0,0,0,0,0,0,0,0],
             [9,0,0,0,0,0,0,0,0]]
const BD4 = [[2,7,4,0,9,1,0,0,5],
             [1,0,0,5,0,0,0,9,0],
             [6,0,0,0,0,3,2,8,0],
             [0,0,1,9,0,0,0,0,8],
             [0,0,5,1,0,0,6,0,0],
             [7,0,0,0,8,0,0,0,3],
             [4,0,2,0,0,0,0,0,9],
             [0,0,0,0,0,0,0,7,0],
             [8,0,0,3,4,9,0,0,0]]
const BD4S = [[2,7,4,8,9,1,3,6,5],
              [1,3,8,5,2,6,4,9,7],
              [6,5,9,4,7,3,2,8,1],
              [3,2,1,9,6,4,7,5,8],
              [9,8,5,1,3,7,6,4,2],
              [7,4,6,2,8,5,9,1,3],
              [4,6,2,7,5,8,1,3,9],
              [5,9,3,6,1,2,8,7,4],
              [8,1,7,3,4,9,5,2,6]]
const NOSOL = [[0,1,2,3,4,5,6,7,8],
               [2,0,0,0,0,0,0,0,0],
               [3,0,0,0,0,0,0,0,0],
               [4,0,0,0,0,0,0,0,0],
               [5,0,0,0,0,0,0,0,0],
               [6,0,0,0,0,0,0,0,0],
               [7,0,0,0,0,0,0,0,0],
               [8,0,0,0,0,0,0,0,0],
               [9,0,0,0,0,0,0,0,0]]
const expected = [[[1,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0]],
               [[2,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0],
               [0,0,0,0,0,0,0,0,0]],
               [[3,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0]],
                [[4,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0]],
                [[5,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0]],
                [[6,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0]],
                [[7,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0]],
                [[8,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0]],
                [[9,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0]]]

describe('Sudoku Solver', ()=>{
    describe('solve', () => {
        test('solvable board', () => {
            const result = solve(BD4);
            expect(result).toStrictEqual(BD4S);
        })

        test('unsolvable board', () => {
            const result = solve(NOSOL);
            expect(result).toBe(false);
        })
    })

    describe('is_solved', () => {
        test('not solved', () => {
            const result = is_solved(BD1);
            expect(result).toBe(false);
        })

        test('not solved (2)', () => {
            const result = is_solved(BD2);
            expect(result).toBe(false);
        })

        test('solved', () => {
            const result = is_solved(BD4S);
            expect(result).toBe(true);
        })
    })

    describe('find_blank', () => {
        test('find_blank success', () => {
            const result = find_blank(BD1);
            expect(result).toStrictEqual({row: 0, col: 0});

        })

        test('find_blank success (2)', () => {
            const result = find_blank(BD4);
            expect(result).toStrictEqual({row: 0, col: 3});
        })

        test('find_blank return null', () => {
            const result = find_blank(BD4S);
            expect(result).toStrictEqual(null);
        })
    })

    describe('fillNumber1to9', () => {
        test('fillNumber1to9 success', () => {
            const result = fillNumber1to9({row: 0, col: 0}, BD1);
        expect(result).toStrictEqual(expected);

        })
        
    })

    describe('valid-board', () => {
        test("valid_board true", () =>{
            const result = valid_board(BD1);
            expect(result).toBe(true);
        });

        test("valid_board true (2)", () => {
            const result = valid_board(BD2);
            expect(result).toBe(true);
        });

        test("valid_board true (3)", () => {
            const result = valid_board(BD3);
            expect(result).toBe(true);
        });

        test("valid_board true(4)", () => {
            const result = valid_board(BD4);
            expect(result).toBe(true);
        });

        test("valid_board false", () => {
            const result = valid_board(NOSOL);
            expect(result).toBe(false);
        });

    });

    describe("next-board", () => {
        test("next-board (1)", () => {
            const result = next_board(BD1);
            expect(result).toStrictEqual(expected);
        })
    })

    
})